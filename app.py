# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZFZPfiKu8uxpwLXlxtbXztbPW71hqj4W
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

import joblib
model = joblib.load('forecasting_ev_model.pkl')  # Uncomment if available

# Load preprocessed data
df = pd.read_csv("preprocessed_ev_data.csv")
df['Date'] = pd.to_datetime(df['Date'])

def forecast_ev_demand(county_name, model, forecast_horizon=36):
    if county_name not in df['County'].unique():
        print(f"County '{county_name}' not found in dataset.")
        return

    cdf = df[df['County'] == county_name].sort_values("Date")
    county_code = cdf['county_encoded'].iloc[0]
    hist_ev = list(cdf['Electric Vehicle (EV) Total'].values[-6:])
    cumulative_ev = list(np.cumsum(hist_ev))
    months_since = cdf['months_since_start'].max()
    latest_date = cdf['Date'].max()

    predictions = []
    for i in range(1, forecast_horizon + 1):
        forecast_date = latest_date + pd.DateOffset(months=i)
        months_since += 1
        lag1, lag2, lag3 = hist_ev[-1], hist_ev[-2], hist_ev[-3]
        roll_mean = np.mean([lag1, lag2, lag3])
        pct_change_1 = (lag1 - lag2) / lag2 if lag2 != 0 else 0
        pct_change_3 = (lag1 - lag3) / lag3 if lag3 != 0 else 0
        ev_slope = np.polyfit(range(len(cumulative_ev[-6:])), cumulative_ev[-6:], 1)[0] if len(cumulative_ev) >= 6 else 0

        features = {
            'months_since_start': months_since,
            'county_encoded': county_code,
            'ev_total_lag1': lag1,
            'ev_total_lag2': lag2,
            'ev_total_lag3': lag3,
            'ev_total_roll_mean_3': roll_mean,
            'ev_total_pct_change_1': pct_change_1,
            'ev_total_pct_change_3': pct_change_3,
            'ev_growth_slope': ev_slope
        }

        pred = model.predict(pd.DataFrame([features]))[0]
        predictions.append((forecast_date, round(pred)))

        hist_ev.append(pred)
        if len(hist_ev) > 6:
            hist_ev.pop(0)
        cumulative_ev.append(cumulative_ev[-1] + pred)
        if len(cumulative_ev) > 6:
            cumulative_ev.pop(0)

    # Plot cumulative EV forecast
    historical = cdf[['Date', 'Electric Vehicle (EV) Total']].copy()
    historical['Cumulative EV'] = historical['Electric Vehicle (EV) Total'].cumsum()
    forecast_df = pd.DataFrame(predictions, columns=['Date', 'Predicted EV Total'])
    forecast_df['Cumulative EV'] = forecast_df['Predicted EV Total'].cumsum() + historical['Cumulative EV'].iloc[-1]

    plt.figure(figsize=(12, 6))
    plt.plot(historical['Date'], historical['Cumulative EV'], label='Historical', marker='o')
    plt.plot(forecast_df['Date'], forecast_df['Cumulative EV'], label='Forecast', marker='o')
    plt.title(f'Cumulative EV Forecast for {county_name} County (Next 3 Years)')
    plt.xlabel('Date')
    plt.ylabel('Cumulative EV Count')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Print forecast growth
    hist_total = historical['Cumulative EV'].iloc[-1]
    forecast_total = forecast_df['Cumulative EV'].iloc[-1]
    if hist_total > 0:
        growth_pct = ((forecast_total - hist_total) / hist_total) * 100
        print(f"Projected growth in {county_name} over 3 years: {growth_pct:.2f}%")
    else:
        print("No historical data available for this county.")